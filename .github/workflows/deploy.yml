name: Deploy
on: 
  push:
    branches: [main]
  pull_request:
    branches: [develop] # Remove after pipeline is functional
jobs:
  deploy:
    environment: Production
    name: Deploy Web Application
    runs-on: ubuntu-latest

    steps:
      # Gets the runner machine IP to whitelist it later to connect to EC2.
      - name: Get runner machine IP
        run: |
          echo "GITHUB_RUNNER_IP=$(curl -s https://ipinfo.io/ip)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }} 

      # Adds the runner's IP to the whitelist of the AWS EC2 security group
      # allowing SSH connections over port 22 (standard SSH port) from the runner.
      - name: Whitelist runner IP address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_EC2_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${GITHUB_RUNNER_IP}/32

      - name: Log into AWS ECR
        run: |  
          echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
          | docker login \
          --username AWS \
          --password-stdin ${{ secrets.AWS_ECR_URL }}

      # Adds the EC2 instance to the list of known hosts for SSH, reducing
      # the risk of man-in-the-middle attacks.
      - name: Add EC2 instance to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOSTNAME }} >> ~/.ssh/known_hosts

      - name: Clone repository
        uses: actions/checkout@v4

        
      - name: Generate .env file in EC2 instance
        uses: ./.github/workflows/generate-env
        with:
          api-url: ${{ secrets.API_URL }}
      
      - name: Build app image
        run: |
          docker build -t wam-webapp .

      - name: Push image to registry
        run: |
          docker tag ${{ secrets.AWS_ECR_IMAGE_NAME }} ${{ secrets.AWS_ECR_URL}}/${{ secrets.AWS_ECR_IMAGE_NAME }}
          docker push ${{ secrets.AWS_ECR_URL}}/${{ secrets.AWS_ECR_IMAGE_NAME }}

      - name: Pull image and deploy in EC2 instance
        run: |
          echo "${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}" > private_key && chmod 600 private_key
          ssh -i private_key ${{ secrets.AWS_EC2_USER_NAME }}@${{ secrets.AWS_EC2_HOSTNAME}} '
          
          # Log into AWS ECR
          echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
          | docker login \
          --username AWS \
          --password-stdin ${{ secrets.AWS_ECR_URL }}
          
          # Check if the container is running, stop it if it is
          if [ $(docker ps -q -f name=wam-webapp) ]; then
            docker stop wam-webapp
          fi

          # Check if the container exists, remove it if it does
          if [ $(docker ps -aq -f status=exited -f name=wam-webapp) ]; then
            docker rm wam-webapp
          fi

          # Pull latest app image from ECR
          docker pull ${{ secrets.AWS_ECR_URL}}/${{ secrets.AWS_ECR_IMAGE_NAME }}

          # Run new app image
          docker run -d \
          -p 80:80 \
          --name wam-webapp \
          ${{ secrets.AWS_ECR_URL }}/${{ secrets.AWS_ECR_IMAGE_NAME }}
          '
          
      - name: Deploy clean up
        if: always()
        uses: ./.github/workflows/deploy-clean-up
        with:
          aws-ec2-security-group-id: ${{ secrets.AWS_EC2_SECURITY_GROUP_ID }}
          aws-ec2-ssh-private-key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          aws-ec2-hostname: ${{ secrets.AWS_EC2_HOSTNAME }}
          aws-ec2-user-name: ${{ secrets.AWS_EC2_USER_NAME }}

